
node 
{ 
	def GLOBAL_VERSION
	def GLOBAL_MAIN_VERSION
	def GLOBAL_MAJOR_VERSION
	def GLOBAL_MINOR_VERSION
	def GLOBAL_RELEASE_VERSION
	
	stage('Clone Repository') 
	{        		


		withCredentials([usernamePassword(credentialsId: 'GIT_LAB_FULL', usernameVariable: 'USERNAME', passwordVariable: 'API_TOKEN')])
		{
			//git branch:'main' url: "https://$API_TOKEN@gitlab.com/sagecarey/test.git"
			//sh 'git branch url:\'https://$API_TOKEN@gitlab.com/sagecarey/mbsa.git\''
			//https://gitlab.com/ralphccarey/mbsa.git
			def cloneCommand = 'git clone https://$USERNAME:$API_TOKEN@gitlab.com/ralphccarey/mbsa.git /var/lib/jenkins/workspace/mbsa'						
			//def branchCommand = 'git branch main origin/main && git switch main'						
			//def branchCommand = 'git switch main'						
			def branchCommand = 'git switch gui'						
			def pullCommand = 'git pull https://$USERNAME:$API_TOKEN@gitlab.com/ralphccarey/mbsa.git'						
			//sh "echo $cloneCommand"
			//sh "$branchCommand"
			sh "if [ -d /var/lib/jenkins/workspace/mbsa/.git ];then  $pullCommand;$branchCommand;else $cloneCommand;fi"
			//sh cloneCommand
			sh 'git status' //this is just for debug			
		}
   	}
	stage('Pre-Build') 
	{        	
			def oDataFile = readFile '/var/lib/jenkins/workspace/mbsa/act_version_info.ver'
			def lines = oDataFile.readLines()
			for (line in lines)
			{
				if(line=~'SUBSYSTEMVERSION')
				{	

					def regexMatch=line=~"(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,4})\\.(\\d{1,4})" //modify regex to match Version Number					
					GLOBAL_VERSION=regexMatch[0][0]
					GLOBAL_MAIN_VERSION=regexMatch[0][1]
					GLOBAL_MAJOR_VERSION=regexMatch[0][2]
					GLOBAL_MINOR_VERSION=regexMatch[0][3]
					GLOBAL_RELEASE_VERSION=regexMatch[0][4]					
					//GLOBAL_VERSION=GLOBAL_MAIN_VERSION + "." + GLOBAL_MAJOR_VERSION + "." + GLOBAL_MINOR_VERSION + "." + GLOBAL_RELEASE_VERSION
					/*
					println("Full = " + GLOBAL_VERSION)
					println("Main = " + GLOBAL_MAIN_VERSION)
					println("Major = " + GLOBAL_MAJOR_VERSION)
					println("Minor = " + GLOBAL_MINOR_VERSION)
					println("Release = " + GLOBAL_RELEASE_VERSION)*/
					
				}
			}		
        		
			def userInput = input(
 			id: 'userInput', message: "Current Version is " + GLOBAL_VERSION + "  Do you wish to modify the current version?", parameters: [
 			choice(name:'ChangeBuild',choices:"Yes\nNo",description:"Select Yes to modify the build version")
			])	
			if(userInput=='Yes')
			{
				println("The selection was " + userInput)		
				def userInputSWVersion = input(
 				id: 'userInputSWVersion', message: "Current Version is " + GLOBAL_VERSION + "  Do you wish to modify the current version?",
				parameters: [
				[$class: 'TextParameterDefinition', name: 'Main', defaultValue: GLOBAL_MAIN_VERSION, description: 'Main Version Number'],
				[$class: 'TextParameterDefinition', name: 'Major', defaultValue: GLOBAL_MAJOR_VERSION, description: 'Major Version Number'],
 				[$class: 'TextParameterDefinition', name: 'Minor', defaultValue: GLOBAL_MINOR_VERSION, description: 'Minor Version Number'],
				[$class: 'TextParameterDefinition', name: 'Release', defaultValue: GLOBAL_RELEASE_VERSION, description: 'Release Number']
				])
				
				println('Old Version was ' + GLOBAL_VERSION)
				GLOBAL_VERSION = userInputSWVersion.get('Main') + '.' + userInputSWVersion.get('Major') + '.' + userInputSWVersion.get('Minor') + '.' +  userInputSWVersion.get('Release')
				println('New Version is ' + GLOBAL_VERSION)
			}				
    	}  
    	stage('Doing Version Stuff')
	{
		
		//Need to approve script usage of java.io.File -> Manage Jenkins -> In-process Script Approval -> signature : new java.io.File java.lang.String and signature : append java.io.File java.lang.Object
		//Scripts not permitted to use new java.io.File java.lang.String. Administrators can decide whether to approve or reject this signature.
		//make backup of version file
		
		def prodVersionString = GLOBAL_VERSION.substring(0,5) + ".*.*"	//conver version to string to format for ProductVersion
		def inputFiles = ["act_version_info.ver","dog.info"] as String[]
		def path='/var/lib/jenkins/workspace/mbsa/'
		
		for(f in inputFiles)
		{
			sh "cp " + path + f + " " + path + f + ".bak"
			sh "rm " + path + f

			//process act_version_info
			def oDataFile = readFile path + f + ".bak"
			def oUpdatedDataFile = new File(path + f)
			def lines = oDataFile.readLines()
			for (line in lines)
			{
				
				def outputString
				if(line=~'SUBSYSTEMVERSION')//write subsytem version
				{	
					//def regexMatch=line=~"(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,4})\\.(\\d{1,4})" //modify regex to match Version Number						
					//oUpdatedDataFile.append("SUBSYSTEMVERSION        =\"" + GLOBAL_VERSION + "\"\n")
					//outputString="SUBSYSTEMVERSION        =\"" + GLOBAL_VERSION + "\"\n"
					//sh "echo \"SUBSYSTEMVERSION        =\"" + GLOBAL_VERSION + "\" >> " + path +f
					//sh "echo \"SUBSYSTEMVERSION        =\"" + GLOBAL_VERSION + "\""
					sh "echo " + line + " >> "+ path + f
					
				}
				else if(line=~'PRODUCTVERSION')//write subsytem version
				{				
					//>00.06.*.*<
				
					if(line=~/>\d\d\.\d\d\.\*\.\*/)
					{					
						//def regexMatch=line=~/(.+?>)(\d\d\.\d\d\.\*\.\*)(\<.+)/
						//def p1=regexMatch[0][1] //XML part 1
						//def p2=regexMatch[0][2]  //existing product version string
						//def p3=regexMatch[0][3] //XML part 2
						//oUpdatedDataFile.append(p1 + prodVersionString + p3 + "\n")				
						//outputString = p1 + prodVersionString + p3 + "\n"
						//sh "echo " + p1 + prodVersionString + p3 + "\n >>" + path +f
						println("Going to try function")
						def pv=getVersion(line,prodVersionString)
						sh "echo " + pv + " >> " + path +f
					}
					else
					{
						//oUpdatedDataFile.append("PRODUCTVERSION          = \"" + prodVersionString + "\"\n")				
						//outputString = "PRODUCTVERSION          = \"" + prodVersionString + "\"\n"
						sh "echo \"PRODUCTVERSION          = \"" + prodVersionString + "\" >> " + path + f
					}				
				}
				else//write other information
				{
					//oUpdatedDataFile.append(line + "\n")
					//outputString = line + "\n"
					sh "echo " + line + " >> "+ path + f
				}		
				//oUpdatedDataFile.append(outputString)
			}
			
			//clean-up
			sh "rm " + path + f + ".bak"
		}
		//process version_info.config		
		sh "cp /var/lib/jenkins/workspace/mbsa/version_info.config /var/lib/jenkins/workspace/mbsa/version_info.config.bak"
		sh "rm /var/lib/jenkins/workspace/mbsa/version_info.config"
		def oVersionInfoDataFile = readFile '/var/lib/jenkins/workspace/mbsa/version_info.config.bak'
		def oVersionInfoFile = new File("/var/lib/jenkins/workspace/mbsa/version_info.config")
		def configFileLines = oVersionInfoDataFile.readLines()
		for (cfgline in configFileLines)
		{			
			if(cfgline=~'SUBSYSTEMVERSION')//write subsytem version
			{	
				def regexMatch=cfgline=~"(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,4})\\.(\\d{1,4})" //modify regex to match Version Number						
				oVersionInfoFile.append("SUBSYSTEMVERSION        = \"" + GLOBAL_VERSION + "\"\n")
			}
			else if(cfgline=~'PRODUCTVERSION')//write subsytem version
			{				
				//>00.06.*.*<
				
				if(cfgline=~/>\d\d\.\d\d\.\*\.\*/)
				{					
					def regexMatch=cfgline=~/(.+?>)(\d\d\.\d\d\.\*\.\*)(\<.+)/
					def p1=regexMatch[0][1] //XML part 1
					def p2=regexMatch[0][2]  //existing product version string
					def p3=regexMatch[0][3] //XML part 2
					oVersionInfoFile.append(p1 + prodVersionString + p3 + "\n")				
				}
				else
				{
					oVersionInfoFile.append("PRODUCTVERSION          = \"" + prodVersionString + "\"\n")				
				}
				
			}
			else//write other information
			{
				oVersionInfoFile.append(cfgline + "\n")
			}


		}
		

		
		//clean up		
		sh "rm /var/lib/jenkins/workspace/mbsa/version_info.config.bak"
    	}
	stage('Check-in')
	{
        	withCredentials([usernamePassword(credentialsId: 'GIT_LAB_FULL', usernameVariable: 'USERNAME', passwordVariable: 'API_TOKEN')])
		{			
			def pushCommand = 'git push https://x:$API_TOKEN@gitlab.com/ralphccarey/mbsa.git'					
			echo 'Checking in new files'
						sh pushCommand	
			sh 'git status' //this is just for debug
			println("Push Command = " + pushCommand)
			sh 'git commit -a -m \"Added data1 and data2\"'									
			sh pushCommand			
			sh 'git status'
		}
    	}
}

@NonCPS
def getVersion(text,pvs)
{
	def regexMatch=text=~/(.+?>)(\d\d\.\d\d\.\*\.\*)(\<.+)/
	def p1=regexMatch[0][1] //XML part 1
	def p2=regexMatch[0][2]  //existing product version string
	def p3=regexMatch[0][3] //XML part 2
	return p1 + pvs + p3 + "\n"
}



