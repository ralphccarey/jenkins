
node 
{ 
	stage('Clone Repository') 
	{        		


		withCredentials([usernamePassword(credentialsId: 'GIT_LAB_FULL', usernameVariable: 'USERNAME', passwordVariable: 'API_TOKEN')])
		{
			//git branch:'main' url: "https://$API_TOKEN@gitlab.com/sagecarey/test.git"
			//sh 'git branch url:\'https://$API_TOKEN@gitlab.com/sagecarey/mbsa.git\''
			//https://gitlab.com/ralphccarey/mbsa.git
			def cloneCommand = 'git clone https://$USERNAME:$API_TOKEN@gitlab.com/ralphccarey/mbsa.git /var/lib/jenkins/workspace/mbsa'						
			def branchCommand = 'git branch gui origin/gui && git switch gui'						
			def pullCommand = 'git pull https://$USERNAME:$API_TOKEN@gitlab.com/ralphccarey/mbsa.git'						
			//sh "echo $cloneCommand"
			//sh "$branchCommand"
			sh "if [ -d /var/lib/jenkins/workspace/mbsa/.git ];then  $pullCommand;$branchCommand;else $cloneCommand;fi"
			//sh cloneCommand
			sh 'git status' //this is just for debug			
		}
   	}
	stage('Pre-Build') 
	{        	
			def oDataFile = readFile '/var/lib/jenkins/workspace/mbsa/mbsa.js'
			def lines = oDataFile.readLines()
			for (line in lines)
			{
				if(line=~'Version')
				{	

					def regexMatch=line=~"(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})" //modify regex to match Version Number					
					GLOBAL_VERSION=regexMatch[0][0]
					GLOBAL_MAIN_VERSION=regexMatch[0][1]
					GLOBAL_MAJOR_VERSION=regexMatch[0][2]
					GLOBAL_MINOR_VERSION=regexMatch[0][3]
					GLOBAL_RELEASE_VERSION=regexMatch[0][4]					
					//GLOBAL_VERSION=GLOBAL_MAIN_VERSION + "." + GLOBAL_MAJOR_VERSION + "." + GLOBAL_MINOR_VERSION + "." + GLOBAL_RELEASE_VERSION
					/*
					println("Full = " + GLOBAL_VERSION)
					println("Main = " + GLOBAL_MAIN_VERSION)
					println("Major = " + GLOBAL_MAJOR_VERSION)
					println("Minor = " + GLOBAL_MINOR_VERSION)
					println("Release = " + GLOBAL_RELEASE_VERSION)*/
					
				}
			}		
        		
			def userInput = input(
 			id: 'userInput', message: "Current Version is " + GLOBAL_VERSION + "  Do you wish to modify the current version?", parameters: [
 			choice(name:'ChangeBuild',choices:"Yes\nNo",description:"Select Yes to modify the build version")
			])	
			if(userInput=='Yes')
			{
				println("The selection was " + userInput)		
				def userInputSWVersion = input(
 				id: 'userInputSWVersion', message: "Current Version is " + GLOBAL_VERSION + "  Do you wish to modify the current version?",
				parameters: [
				[$class: 'TextParameterDefinition', name: 'Main', defaultValue: GLOBAL_MAIN_VERSION, description: 'Main Version Number'],
				[$class: 'TextParameterDefinition', name: 'Major', defaultValue: GLOBAL_MAJOR_VERSION, description: 'Major Version Number'],
 				[$class: 'TextParameterDefinition', name: 'Minor', defaultValue: GLOBAL_MINOR_VERSION, description: 'Minor Version Number'],
				[$class: 'TextParameterDefinition', name: 'Release', defaultValue: GLOBAL_RELEASE_VERSION, description: 'Release Number']
				])
				
				println('Old Version was ' + GLOBAL_VERSION)
				GLOBAL_VERSION = userInputSWVersion.get('Main') + '.' + userInputSWVersion.get('Major') + '.' + userInputSWVersion.get('Minor') + '.' +  userInputSWVersion.get('Release')
				println('New Version is ' + GLOBAL_VERSION)
			}				
    	}  
    	stage('Add Files')
	{
        	echo 'Adding Files'
		sh "echo 'New file 1' > data1.txt"
		sh "echo 'var a=0' >>data1.txt"
		sh "echo 'var b=1' >>data1.txt"
		sh "echo 'var c=2' >>data1.txt"
		sh "echo 'New File 2' >data2.txt"
		sh "echo 'Color\tSize' >>data2.txt"
		sh "echo 'Blue\tLarge' >>data2.txt"
		sh "echo 'Red\tSmall' >>data2.txt"
    	}
	stage('Check-in')
	{
        	withCredentials([usernamePassword(credentialsId: 'GIT_LAB_FULL', usernameVariable: 'USERNAME', passwordVariable: 'API_TOKEN')])
		{			
			def pushCommand = 'git push https://x:$API_TOKEN@gitlab.com/ralphccarey/mbsa.git'					
			echo 'Checking in new files'
						sh pushCommand	
			//sh 'git status' //this is just for debug
			println("Push Command = " + pushCommand)
			sh 'git commit -a -m \"Added data1 and data2\"'									
			sh pushCommand			
			sh 'git status'
		}
    	}
}

